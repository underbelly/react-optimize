!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e(require("react")):"function"==typeof define&&define.amd?define("react-optimize",["react"],e):"object"==typeof exports?exports["react-optimize"]=e(require("react")):t["react-optimize"]=e(t.react)}(window,function(t){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=1)}([function(e,n){e.exports=t},function(t,e,n){"use strict";n.r(e),n.d(e,"Experiment",function(){return a}),n.d(e,"Variant",function(){return u});var r=n(0),o=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),i=r.createContext(null),a=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.state={variant:null},e.updateVariant=function(t){e.setState(function(){return{variant:void 0===t||null===t?"0":t}})},e.delayedInitialization=function(){var t=window.google_optimize&&window.google_optimize.get(e.props.id);e.updateVariant(t)},e}return o(e,t),e.prototype.componentDidMount=function(){var t=this;if(!this.props.id)throw new Error("Please specify the experiment id");var e=window.dataLayer&&window.dataLayer.hide&&window.dataLayer.hide.end;e?window.dataLayer.hide.end=function(){t.delayedInitialization(),e()}:this.delayedInitialization(),window.gtag&&window.gtag("event","optimize.callback",{name:this.props.id,callback:this.updateVariant})},e.prototype.componentWillUnmount=function(){window.gtag&&window.gtag("event","optimize.callback",{name:this.props.id,callback:this.updateVariant,remove:!0})},e.prototype.render=function(){return r.createElement(i.Provider,{value:this.state.variant},null===this.state.variant?this.props.loader:this.props.children)},e.defaultProps={loader:null,id:null},e}(r.Component),u=function(){return r.createElement(i.Consumer,null,function(t){return t===(void 0).props.id?(void 0).props.children:null})}}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,